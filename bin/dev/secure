#!/usr/bin/env bash
# * Creates CA certs for each ES instance and kibana
# * Sets password for the kibana_system user
# * Starts containers
#
# Run this script form the project root directory
# ./bin/dev/start

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
PROJECT_ROOT_DIR=$DIR/../../

source $PROJECT_ROOT_DIR/.env
source $PROJECT_ROOT_DIR/bin/dev/es/es_functions
source $PROJECT_ROOT_DIR/bin/dev/kibana/kibana_functions

# Create certs (ca.crt, es01.[key|crt], kibana.[key|crt], etc)
docker-compose -f $PROJECT_ROOT_DIR/docker/es/certs/create-certs.yml run --rm create_certs

# Start all services
docker-compose -f $PROJECT_ROOT_DIR/docker-compose.yml up -d

# Ensure that Elasticsearch is ready
WAIT_TIME=15
until $(es_is_ready); do
    printf "Elasticsearch is not ready... waiting $WAIT_TIME seconds\n"
    sleep $WAIT_TIME
done

# Check to see if the kibana_system's password has been set
if es_auth kibana_system $KIBANA_SYSTEM_PASSWORD; then
  echo "The kibana_system username and password is correct."
else
  echo "Updating the kibana_system password and restarting services."
  es_set_password kibana_system $KIBANA_SYSTEM_PASSWORD
  docker-compose -f $PROJECT_ROOT_DIR/docker-compose.yml restart
fi

# Enusre Kibana is ready
WAIT_TIME=30
until $(kibana_is_ready); do
  printf "Kibana is not ready... waiting $WAIT_TIME seconds\n"
  sleep $WAIT_TIME
done

echo "Visit https://localhost:5601 and login with the elastic user and your \$ELASTIC_PASSWORD"